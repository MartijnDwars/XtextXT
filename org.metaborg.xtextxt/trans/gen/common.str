module common

imports
	
	lib/sdf/TemplateLang

rules // Traversals
  
  /**
   * Apply s topdown. If s is applied to an element of a list, the list is
   * flattened afterwards. 
   */
  interpolate-td(s):
    ast -> result
    where
      if <is-list> ast then
        result := <s; all(interpolate-td(s)); flatten-list> ast
      else
        result := <s; all(interpolate-td(s))> ast
      end

rules // Lists
  
  /**
   * Put given term in a list if it was not already
   */
  listify =
    is-list < id + ![<id>]
  
  /**
   * Turn a list [1, 2, 3] into an Alt(1, Alt(2, 3))
   */
  altify:
  	[x] -> x
  
  altify:
  	[h | t] -> Alt(h, <altify> t)

rules // Strings
  
  /**
   * Unquote without arguments
   */
  unquote = unquote(id)
  
  /**
   * Ensure the term has double quotes
   */
  ensure-double-quotes = try(unquote); double-quote
