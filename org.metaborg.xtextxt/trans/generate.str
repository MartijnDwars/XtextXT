module generate

imports
	
	libstratego-aterm // For pp-aterm
	include/Xtext
	lib/sdf/TemplateLang
	lib/sdf/TemplateLang-pp
  lib/sdf/pp/TemplateLang-pp
  gen/common
  gen/expand
  
rules 
  
  generate-sdf:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|$[sdf3])> path
    ; result   := <transform ; pp-SDF> selected
  
  refactor-sdf:
    (user-input, selected, position, ast, path, project-path) -> (changes, [], [], [])
    with
      changes := <map(!(<id>, <transform ; pp-SDF>))> selected
  
  transform:
  	selected -> result
  	where
  	  expanded := <interpolate-td(try(repeat(expand)))> selected
  	; <debug> <pp-aterm> expanded
  	; result   := <transform-All <+ map(transform-All)> expanded
  	; <debug> <pp-aterm> result
  	  
  transform-All =
    transform-Grammar <+ transform-Rule <+ transform-Token
  
  transform-Grammar:
    Grammar(name, mixin, xrules) -> Module(Unparameterized(<last> name), [], sections)
    where
      prods    := <map(transform-Rule)> xrules
    ; sections := [
        SDFSection(
      	 ContextFreeSyntax(
      		  prods
    		  )
  		  )
		  ]
  
  transform-Rule:
    ParserRule(name, _, group) -> SdfProduction(SortDef(name), Rhs(rhs), NoAttrs())
    where
      rhs := <transform-Group> group
  
  transform-Group:
    Group(tokens) -> result
    where
      result := <map(transform-Token)> tokens
  
  transform-Token =
  	transform-Cardinality <+ transform-Keyword
  
  transform-Cardinality:
    Optional(x) -> Opt(<transform-Keyword> x)
  
  transform-Cardinality:
    Multiple(x) -> Iter(<transform-Keyword> x)
  
  transform-Cardinality:
    Any(x) -> IterStar(<transform-Keyword> x)
  
  transform-Keyword:
  	Keyword(x) -> Lit(x)
