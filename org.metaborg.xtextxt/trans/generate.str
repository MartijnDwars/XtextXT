module generate

imports

	include/Xtext
	lib/sdf/TemplateLang
	lib/sdf/TemplateLang-pp
  lib/sdf/pp/TemplateLang-pp
  trans/xtext
  gen/common
  gen/expand
  gen/list
  gen/terminal
  
rules 
  
  generate-sdf:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|$[sdf3])> path
    ; result   := <transform ; pp-SDF> selected
  
  refactor-sdf:
    (user-input, selected, position, ast, path, project-path) -> (changes, [], [], [])
    with
      changes := <map(!(<id>, <transform ; pp-SDF>))> selected
  
  transform:
  	selected -> result
  	where
      expanded := <interpolate-td(try(repeat(expand)))> selected
    ; result   := <transform-All <+ map(transform-All)> expanded
  
  transform-All =
    transform-Grammar <+ transform-Rule <+ transform-Token-All
  
  transform-Grammar:
    Grammar(name, mixin, xrules) -> Module(Unparameterized(<last> name), [], sections)
    where
      prods    := <map(transform-Rule)> xrules
    ; sections := [
        SDFSection(
      	 ContextFreeSyntax(
      		  prods
    		  )
  		  )
		  ]
  
  transform-Rule:
    ParserRule(name, _, body) -> SdfProduction(SortDef(name), Rhs(rhs), NoAttrs())
    where
      rhs := <transform-Token-All ; listify> body
  
  transform-Token-All = transform-Token-List <+ transform-Token
  
  transform-Token:
    Group(tokens) -> result
    where
      result := <map(transform-Token-All)> tokens
  
  transform-Token:
    Optional(x) -> Opt(<transform-Token> x)
  
  transform-Token:
    Multiple(x) -> Iter(<transform-Token> x)
  
  transform-Token:
    Any(x) -> IterStar(<transform-Token> x)
  
  transform-Token:
    Assign(_, _, body) -> <transform-Token> body
  
  transform-Token:
    XRef(_, terminal) -> <transform-Token> terminal
  
  transform-Token:
    Id() -> Sort("ID")
  
  transform-Token:
  	Keyword(x) -> Lit(x)
  
  transform-Token:
    Call(x) -> Sort(x)
