module generate

imports
	
	include/Xtext
	lib/sdf/TemplateLang
	lib/sdf/TemplateLang-pp
  lib/sdf/pp/TemplateLang-pp
  
rules 

  generate-sdf:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|$[sdf3])> path
    ; result   := <transform ; pp-SDF> selected
  
  refactor-sdf:
    (user-input, selected, position, ast, path, project-path) -> (changes, [], [], [])
    with
      changes := <map(!(<id>, <transform>))> selected
  
  transform:
  	selected -> result
  	where
  	  result := <transform-Grammar <+ transform-Rule> selected
  
  transform-Grammar:
    Grammar(name, mixin, xrules) -> Module(Unparameterized(<last> name), [], sections)
    where
      prods    := <map(transform-Rule)> xrules
    ; sections := [
        SDFSection(
      	 ContextFreeSyntax(
      		  prods
    		  )
  		  )
		  ]
  
  transform-Rule:
    ParserRule(name, _) -> SdfProduction(SortDef(name), Rhs(rhs), NoAttrs())
    where
    	rhs := []
